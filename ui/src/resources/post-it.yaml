swagger: "2.0"
info:
  description: post-it service
  version: 1.0.0
  title: post-it service
  contact:
    email: dornakash94@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
tags:
  - name: user
    description: Operations about user
  - name: post
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - user
      summary: login if the email exists
      operationId: login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/LoginRequest"
      responses:
        "200":
          description: Logged in successfully
          schema:
            $ref: "#/definitions/LoginResponse"
        "401":
          description: failed login
  /user/register:
    post:
      tags:
        - user
      summary: create new user
      operationId: register
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/RegisterRequest"
      responses:
        "200":
          description: registered successfully
          schema:
            $ref: "#/definitions/RegisterResponse"
        "400":
          description: bad input register
        "409":
          description: already exists
  /posts/list:
    get:
      tags:
        - post
      summary: the list of the posts
      operationId: getAllPosts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/AuthorizationHeader"
        - $ref: "#/parameters/PageNumberQuery"
        - $ref: "#/parameters/PageSizeQuery"
        - $ref: "#/parameters/FromIdQuery"
        - $ref: "#/parameters/FieldMaskQuery"
          #valid values: ["id","title","content","image","creationTime","author","author_image"]

      responses:
        "200":
          description: list of posts
          schema:
            $ref: "#/definitions/GetAllPostsResponse"
        "401":
          description: Invalid Authorization header
  /posts/post:
    post:
      tags:
        - post
      summary: create a new post
      operationId: createPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/AuthorizationHeader"
        - $ref: "#/parameters/CreatePostRequest"

      responses:
        "200":
          description: new post created
          schema:
            $ref: "#/definitions/CreatePostResponse"
        "401":
          description: Invalid Authorization header

  /posts/post/{post-id}:
    get:
      tags:
        - post
      summary: the specific post
      operationId: getPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/AuthorizationHeader"
        - $ref: "#/parameters/PostIdPath"
      responses:
        "200":
          description: full post by id
          schema:
            $ref: "#/definitions/GetPostResponse"
        "401":
          description: Invalid Authorization header
        "404":
          description: post not exists
    put:
      tags:
        - post
      summary: edit the post
      operationId: editPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/AuthorizationHeader"
        - $ref: "#/parameters/PostIdPath"
        - $ref: "#/parameters/EditPostRequest"

      responses:
        "200":
          description: edited post
          schema:
            $ref: "#/definitions/EditPostResponse"
        "401":
          description: Invalid Authorization header
        "403":
          description: Insufficient permissions
        "404":
          description: post not exists
    delete:
      tags:
        - post
      summary: delete post by id
      operationId: deletePost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/AuthorizationHeader"
        - $ref: "#/parameters/PostIdPath"

      responses:
        "204":
          description: post deleted
        "401":
          description: Invalid Authorization header
        "403":
          description: Insufficient permissions
        "404":
          description: post doesn't exists

parameters:
  AuthorizationHeader:
    in: header
    name: authorization
    required: true
    type: string

  PostIdPath:
    in: path
    name: post-id
    type: integer
    format: int64
    required: true

  PageSizeQuery:
    in: query
    name: page-size
    description: Page size
    type: integer
    minimum: 1
    maximum: 50
    default: 30
    required: false
  PageNumberQuery:
    in: query
    name: page-number
    description: current page
    type: integer
    minimum: 0
    default: 0
    required: false
  FromIdQuery:
    in: query
    name: from-id
    description: filter using from id
    type: integer
    format: int64
    default: 0
    required: false
  FieldMaskQuery:
    in: query
    name: field-mask
    type: array
    items:
      type: string

  RegisterRequest:
    in: body
    name: "RegisterRequest"
    required: true
    schema:
      required:
        - email
        - password
        - author
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 3
        author:
          type: string
          minLength: 4
        author_image:
          type: string
  LoginRequest:
    in: body
    name: "LoginRequest"
    required: true
    schema:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 3

  CreatePostRequest:
    in: body
    name: "CreatePostRequest"
    required: true
    schema:
      type: object
      required:
        - post
      properties:
        post:
          $ref: "#/definitions/Post"
  EditPostRequest:
    in: body
    name: "EditPostRequest"
    required: true
    schema:
      type: object
      properties:
        post:
          $ref: "#/definitions/Post"

  DeletePostRequest:
    in: body
    name: "PostRequest"
    required: true
    schema:
      type: object
      properties:
        id:
          type: integer
          format: int64

definitions:
  LoginResponse:
    type: object
    properties:
      account:
        $ref: "#/definitions/Account"

  RegisterResponse:
    type: object
    properties:
      account:
        $ref: "#/definitions/Account"

  GetAllPostsResponse:
    type: object
    properties:
      posts:
        type: array
        items:
          $ref: "#/definitions/Post"

  GetPostResponse:
    type: object
    properties:
      post:
        $ref: "#/definitions/Post"

  CreatePostResponse:
    type: object
    properties:
      post:
        $ref: "#/definitions/Post"

  EditPostResponse:
    type: object
    properties:
      post:
        $ref: "#/definitions/Post"

  Account:
    type: object
    properties:
      token:
        type: string
      author:
        type: string
      author_image:
        type: string
  Post:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      title:
        type: string
      content:
        type: string
      image:
        type: string
      creationTime:
        type: integer
        format: int64
        readOnly: true
      author:
        type: string
        readOnly: true
      author_image:
        type: string
        readOnly: true
